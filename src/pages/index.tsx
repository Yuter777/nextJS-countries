"use client";

import { matchSorter } from "match-sorter";
import { GetStaticProps, InferGetStaticPropsType } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import Card from "../components/Card";
import Filter from "../components/Filter";

const Home = ({ data }: InferGetStaticPropsType<typeof getStaticProps>) => {
  const router = useRouter();
  const orderedCountries = matchSorter(
    data,
    router.query.search ? (router.query.search as string) : "",
    { keys: ["name.common"] }
  );

  const countriesWithRegion = orderedCountries.filter(
    router.query.region
      ? (country) => country.region === router.query.region
      : (country) => !(country.region === null)
  );

  const countries = countriesWithRegion.map((country, index) => (
    <Card
      key={country.name.official}
      to={country.name.common}
      name={country.name.common}
      flag={{
        src: country.flags.png,
        alt: country.flags.alt,
      }}
      region={country.region}
      capital={country.capital}
      population={country.population}
    />
  ));

  return (
    <>
      <Head>
        <title>NextJs!</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="" />
      </Head>

      <div className="flex flex-wrap justify-center gap-8  p-6  md:p-10 xl:gap-10">
        <Filter />
        {countries}
      </div>
    </>
  );
};

export default Home;

export const getStaticProps: GetStaticProps<{
  data: [
    {
      name: { common: string; official: string };
      flags: { png: string; alt: string };
      region: string;
      capital: string;
      population: string;
    }
  ];
}> = async function () {
  const res = await fetch(
    "https://restcountries.com/v3.1/all?fields=name,region,capital,name,population,flags"
  );

  const data: [
    {
      name: { common: string; official: string };
      flags: { png: string; alt: string };
      region: string;
      capital: string;
      population: string;
    }
  ] = await res.json();

  if (!data) {
    return {
      notFound: true,
    };
  }

  return {
    props: { data },
  };
};
